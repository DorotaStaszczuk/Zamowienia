# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-03-25 12:57
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=90, verbose_name='Nazwa firmy')),
                ('name', models.CharField(max_length=64, verbose_name='Imię')),
                ('surname', models.CharField(max_length=64, verbose_name='Nazwisko')),
                ('street', models.CharField(max_length=350, verbose_name='Ulica')),
                ('house_number', models.IntegerField(verbose_name='Numer domu')),
                ('apartment_number', models.PositiveSmallIntegerField(verbose_name='Numer lokalu')),
                ('zip_code', models.CharField(max_length=6, verbose_name='Kod pocztowy')),
                ('city', models.CharField(max_length=350, verbose_name='Miejscowość')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_list', models.TextField(verbose_name='Lista produktów')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Data wprowadzenia')),
                ('payment_deadline', models.DateTimeField(verbose_name='Termin_platnosci')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Sumaryczna cena')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nazwa')),
                ('manufacturer', models.CharField(max_length=64, verbose_name='Producent')),
                ('description', models.TextField(verbose_name='Opis')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Cena')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Zdjęcie')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Zdjęcie profilowe')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='Data rejestracji')),
                ('type', models.IntegerField(choices=[(0, 'Sprzedawca'), (1, 'Klient')], null=True, verbose_name='Typ użytkownika')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Klient'),
        ),
        migrations.AddField(
            model_name='order',
            name='products',
            field=models.ManyToManyField(to='Z_app.Product'),
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Użytkownik'),
        ),
    ]
